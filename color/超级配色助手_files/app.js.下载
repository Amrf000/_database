  var app = app || {};

$(function() {
  "use strict";

  app.SwatchAppView = Backbone.View.extend({
    el: "#appframe",

    isTouchMove: false,
    startSaturation: 0,

    events: {
      "click #header-tab": "toggleheader",
      "click #header-tab2": "toggleheader2"
    },

    initialize: function() {
      app.Colors.on("add", this.addOne, this);
      app.Colors.on("reset", this.addAll, this);
      app.Colors.on("remove", this.layout, this);

      this.editModel = new app.Color({h: 180, s: 50, l: 50});
      this.editModel.on("change", this.render, this);

      if('ontouchstart' in document.documentElement) {
        this.$("#edit").bind("touchstart", _.bind(this.touchstart, this))
          .bind("touchmove", _.bind(this.touchmove, this))
          .bind("touchend", _.bind(this.touchend, this))
          .bind("gesturestart", _.bind(this.gesturestart, this))
          .bind("gesturechange", _.bind(this.gesturechange, this));

      } else {
        this.$("#constraints").mousemove(_.bind(this.mousemove, this))
          .scroll(_.bind(this.scroll, this))
          .click(_.bind(this.grabColor, this))
          .scrollTop(500);
      }

      $(window).resize(_.bind(this.layout, this));
    },

    render: function() {
      this.$("#edit").css({
        "background": this.editModel.hslCss()
      });

      this.$("#edit h2").html(this.editModel.hexCss());
    },

    layout: function() {
      var w = document.all.appframe.offsetWidth,
          sliceSize = Math.floor(w / (app.Colors.length + 2));

      this.$('#colors .swatch:not(#edit):not(.destroyed)').each(function(i, el) {
        $(el).css({
          left: i * sliceSize,
          width: sliceSize,
        })
     
        //if(sliceSize <= 40 ){
	       // $(el).find(".tishi").hide();
        //}
        // if(sliceSize > 41 ){
	       // $(el).find(".tishi").show();
        //}
      });

      this.$("#edit").css({
        left: app.Colors.length * sliceSize,
      });
    },

    addOne: function(color) {
      var view = new app.ColorView({model: color});
      this.$("#colors").append(view.render().el);
	  var clip = new ZeroClipboard( $(".js-zclip"), {
			  moviePath: "http://icon.58pic.com/js/ZeroClipboard.swf",
			  trustedDomains: ['*'],
			  allowScriptAccess: "always"
			} );
			clip.on( 'complete', function(client, args) {
				var diff = $(this).attr('data-diff');
				 
				//统计
				jQuery.getJSON("/index.php?m=psb&a=qwpsUv", function(data) {

					if(data >=5 ){
						$.cookie('referer', '', { expires: -1 }); // 删除
						$.cookie('success_target_path', '', { expires: -1 }); // 删除
						var login_backurl = window.location.href;
						
						$.cookie('referer', login_backurl , {domain:'58pic.com'});
						$.cookie('success_target_path', login_backurl , {domain:'58pic.com'});
					
						$(".recom_Application,#BJ").show();
						$("#BJ").css({height:$(document).height()});
						$(".recom_Application").css({left:($(window).width()-537)/2+"px",top:($(window).height()-370)/2+"px"});
					}
					
				});
				if(diff === 'parent'){
					if(document.getElementById("copy-error") !== null )
						$(this).find(".tishi").html("复制失败");
					else
						$(this).find(".tishi").html("已复制");
						$(this).find(".ts_rgb").hide();
						$(this).find(".tishi2").html("已复制");
						
      				var current = $(this);
			  		setTimeout(function(){current.find(".tishi").html("复制")}, 1500);	
			  		setTimeout(function(){current.find(".tishi2").html("");current.find(".ts_rgb").show()}, 1500);	
				}
				else{
					if(document.getElementById("copy-error") !== null)
						$(this).find(".tishi").html("复制失败");
					else
						$(this).parent().find(".tishi").html("已复制");
						$(this).find(".ts_rgb").hide();
						$(this).find(".tishi2").html("已复制");
      				var current = $(this);
			  		setTimeout(function(){current.parent().find(".tishi").html("复制")}, 1500);
			  		setTimeout(function(){current.find(".tishi2").html("");current.find(".ts_rgb").show()}, 1500);	
				}
			} );
			clip.on('noflash', function(client, args) {
				$('.right-color').append('<span id="copy-error" style="display:none">复制失败</span>');
			});

      view.$el.css({
        left: this.$("#edit").css("left"),
        width: this.$("#edit").css("width")
      });

      // defer the render for a frame
      setTimeout(_.bind(function() {
        view.$el.addClass("animating");
        this.layout();
      }, this), 0);
    },

    addAll: function() {
      this.$("#colors li:not(#edit)").remove();
      app.Colors.each(this.addOne, this);

      if(app.Colors.length == 0) {
        this.layout();
      }
    },

    toggleheader: function(event) {
	var first_page = $.cookie('first_czl');
		this.$("#header").fadeOut(1000);
		this.$("#header-tab").fadeOut(1000);
		this.$("#header-tab2").fadeIn(1000);
		$.cookie('first_czl', 'first_czl');
	    
     
    },
	toggleheader2: function(event) {
	
		this.$("#header").fadeIn(1000);
		this.$("#header-tab").fadeIn(1000);
		this.$("#header-tab2").fadeOut(1000);
     
    },

    grabColor: function(event) {
      app.Colors.add({
        color: new Color(this.editModel.color().rgb())
      });
    },

    move: function(px, py) {
      var editEl = this.$("#edit"),
          w = editEl.width(),
          h = editEl.height(),
          x, y, offset, hue, lit;

      offset = editEl.offset();

      x = Math.max(0, px - offset.left);
      y = Math.max(0, py - offset.top);

      hue = Math.floor(x / w * 360),
      lit = Math.floor(y / h * 100);

      this.editModel.color().hue(hue)
        .lightness(lit);
      this.editModel.trigger("change");
    },

    scroll: function(event) {
      var col, offset = this.$("#constraints").scrollTop() / 10;
      offset = Math.max(0, Math.min(100, offset));
      this.editModel.color().saturation(offset);
      this.editModel.trigger("change");
    },

    mousemove: function(event) {
      this.move(event.pageX, event.pageY);
    },

    touchstart: function(event) {
      event.preventDefault();
      this.isTouchMoved = false;
    },

    touchmove: function(event) {
      this.move(event.originalEvent.touches[0].pageX, event.originalEvent.touches[0].pageY);
      this.isTouchMoved = true;
    },

    touchend: function(event) {
      if(! this.isTouchMoved) {
        this.grabColor();
      }
    },

    gesturestart: function(event) {
      event.preventDefault();
      this.startSaturation = this.editModel.get("s");
    },

    gesturechange: function(event) {

      if(event.originalEvent.scale) {
        var offset = Math.max(0, Math.min(100, this.startSaturation * event.originalEvent.scale));
        this.editModel.color().saturation(offset);
        this.editModel.trigger("change");
      }
    }

  });

});